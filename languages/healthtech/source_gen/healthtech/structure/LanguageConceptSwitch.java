package healthtech.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BloodPressureMeasurement = 0;
  public static final int DiastolicPressueMeasurement = 1;
  public static final int EvaluationEntry = 2;
  public static final int FloatConstant = 3;
  public static final int GlucoseMeasurement = 4;
  public static final int InputSpec = 5;
  public static final int IntegerConstant = 6;
  public static final int LessOrEqualUnaryOperator = 7;
  public static final int Measurement = 8;
  public static final int MeasurementBinaryOperator = 9;
  public static final int MeasurementOperand = 10;
  public static final int MeasurementOperandAdapter = 11;
  public static final int MeasurementRange = 12;
  public static final int MeasurementRangeOperator = 13;
  public static final int MeasurementType2UnitMapping = 14;
  public static final int MeasurementUnaryOperator = 15;
  public static final int MeasurementUnitConfig = 16;
  public static final int MoreOrEqualUnaryOperator = 17;
  public static final int Operand = 18;
  public static final int Operator = 19;
  public static final int OutputResult = 20;
  public static final int Protocol = 21;
  public static final int PulseMeasurement = 22;
  public static final int SystolicPressureMeasurement = 23;
  public static final int TemperatureMeasurement = 24;
  public static final int WeightMeasurement = 25;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L);
    builder.put(0x3d41ce506dda978dL, BloodPressureMeasurement);
    builder.put(0x3d41ce506dda9794L, DiastolicPressueMeasurement);
    builder.put(0x41ac8d399bc41f17L, EvaluationEntry);
    builder.put(0x3d41ce506dd44f32L, FloatConstant);
    builder.put(0x1f38b4c7398f1c67L, GlucoseMeasurement);
    builder.put(0x41ac8d399bc220cdL, InputSpec);
    builder.put(0x3d41ce506dc3696cL, IntegerConstant);
    builder.put(0x1f38b4c739b156a7L, LessOrEqualUnaryOperator);
    builder.put(0x3d41ce506dda9788L, Measurement);
    builder.put(0x2f8212ac0c586128L, MeasurementBinaryOperator);
    builder.put(0xbb4c090788f647L, MeasurementOperand);
    builder.put(0xbb4c09072be344L, MeasurementOperandAdapter);
    builder.put(0x2f8212ac0c4edadcL, MeasurementRange);
    builder.put(0x3d41ce506dc3695fL, MeasurementRangeOperator);
    builder.put(0xbb4c0906e09264L, MeasurementType2UnitMapping);
    builder.put(0x1f38b4c739b14c4cL, MeasurementUnaryOperator);
    builder.put(0xbb4c0906ddd1c3L, MeasurementUnitConfig);
    builder.put(0x1f38b4c739b15693L, MoreOrEqualUnaryOperator);
    builder.put(0x3d41ce506dc3696dL, Operand);
    builder.put(0x1f38b4c739b155feL, Operator);
    builder.put(0x1f38b4c739accbebL, OutputResult);
    builder.put(0x41ac8d399bc1bfe2L, Protocol);
    builder.put(0xbb4c0906e476e7L, PulseMeasurement);
    builder.put(0x3d41ce506dda9795L, SystolicPressureMeasurement);
    builder.put(0xbb4c0906e39f51L, TemperatureMeasurement);
    builder.put(0x3d41ce506dda9789L, WeightMeasurement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
