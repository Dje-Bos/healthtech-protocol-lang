package healthtech.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBloodPressureMeasurement = createDescriptorForBloodPressureMeasurement();
  /*package*/ final ConceptDescriptor myConceptDiastolicPressueMeasurement = createDescriptorForDiastolicPressueMeasurement();
  /*package*/ final ConceptDescriptor myConceptEvaluationEntry = createDescriptorForEvaluationEntry();
  /*package*/ final ConceptDescriptor myConceptFloatConstant = createDescriptorForFloatConstant();
  /*package*/ final ConceptDescriptor myConceptGlucoseMeasurement = createDescriptorForGlucoseMeasurement();
  /*package*/ final ConceptDescriptor myConceptInputSpec = createDescriptorForInputSpec();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = createDescriptorForIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptLessOrEqualUnaryOperator = createDescriptorForLessOrEqualUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurement = createDescriptorForMeasurement();
  /*package*/ final ConceptDescriptor myConceptMeasurementBinaryOperator = createDescriptorForMeasurementBinaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementOperand = createDescriptorForMeasurementOperand();
  /*package*/ final ConceptDescriptor myConceptMeasurementOperandAdapter = createDescriptorForMeasurementOperandAdapter();
  /*package*/ final ConceptDescriptor myConceptMeasurementRange = createDescriptorForMeasurementRange();
  /*package*/ final ConceptDescriptor myConceptMeasurementRangeOperator = createDescriptorForMeasurementRangeOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementType2UnitMapping = createDescriptorForMeasurementType2UnitMapping();
  /*package*/ final ConceptDescriptor myConceptMeasurementUnaryOperator = createDescriptorForMeasurementUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementUnitConfig = createDescriptorForMeasurementUnitConfig();
  /*package*/ final ConceptDescriptor myConceptMoreOrEqualUnaryOperator = createDescriptorForMoreOrEqualUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptOperand = createDescriptorForOperand();
  /*package*/ final ConceptDescriptor myConceptOperator = createDescriptorForOperator();
  /*package*/ final ConceptDescriptor myConceptOutputResult = createDescriptorForOutputResult();
  /*package*/ final ConceptDescriptor myConceptProtocol = createDescriptorForProtocol();
  /*package*/ final ConceptDescriptor myConceptPulseMeasurement = createDescriptorForPulseMeasurement();
  /*package*/ final ConceptDescriptor myConceptSystolicPressureMeasurement = createDescriptorForSystolicPressureMeasurement();
  /*package*/ final ConceptDescriptor myConceptTemperatureMeasurement = createDescriptorForTemperatureMeasurement();
  /*package*/ final ConceptDescriptor myConceptWeightMeasurement = createDescriptorForWeightMeasurement();
  /*package*/ final EnumerationDescriptor myEnumerationMeasurementType = new EnumerationDescriptor_MeasurementType();
  /*package*/ final EnumerationDescriptor myEnumerationMeasurementUnit = new EnumerationDescriptor_MeasurementUnit();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeFPNumber = new ConstrainedStringDatatypeDescriptorImpl(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd45327L, "FPNumber", "r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635133735", "-?[0-9]+\\.[0-9]*");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBloodPressureMeasurement, myConceptDiastolicPressueMeasurement, myConceptEvaluationEntry, myConceptFloatConstant, myConceptGlucoseMeasurement, myConceptInputSpec, myConceptIntegerConstant, myConceptLessOrEqualUnaryOperator, myConceptMeasurement, myConceptMeasurementBinaryOperator, myConceptMeasurementOperand, myConceptMeasurementOperandAdapter, myConceptMeasurementRange, myConceptMeasurementRangeOperator, myConceptMeasurementType2UnitMapping, myConceptMeasurementUnaryOperator, myConceptMeasurementUnitConfig, myConceptMoreOrEqualUnaryOperator, myConceptOperand, myConceptOperator, myConceptOutputResult, myConceptProtocol, myConceptPulseMeasurement, myConceptSystolicPressureMeasurement, myConceptTemperatureMeasurement, myConceptWeightMeasurement);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BloodPressureMeasurement:
        return myConceptBloodPressureMeasurement;
      case LanguageConceptSwitch.DiastolicPressueMeasurement:
        return myConceptDiastolicPressueMeasurement;
      case LanguageConceptSwitch.EvaluationEntry:
        return myConceptEvaluationEntry;
      case LanguageConceptSwitch.FloatConstant:
        return myConceptFloatConstant;
      case LanguageConceptSwitch.GlucoseMeasurement:
        return myConceptGlucoseMeasurement;
      case LanguageConceptSwitch.InputSpec:
        return myConceptInputSpec;
      case LanguageConceptSwitch.IntegerConstant:
        return myConceptIntegerConstant;
      case LanguageConceptSwitch.LessOrEqualUnaryOperator:
        return myConceptLessOrEqualUnaryOperator;
      case LanguageConceptSwitch.Measurement:
        return myConceptMeasurement;
      case LanguageConceptSwitch.MeasurementBinaryOperator:
        return myConceptMeasurementBinaryOperator;
      case LanguageConceptSwitch.MeasurementOperand:
        return myConceptMeasurementOperand;
      case LanguageConceptSwitch.MeasurementOperandAdapter:
        return myConceptMeasurementOperandAdapter;
      case LanguageConceptSwitch.MeasurementRange:
        return myConceptMeasurementRange;
      case LanguageConceptSwitch.MeasurementRangeOperator:
        return myConceptMeasurementRangeOperator;
      case LanguageConceptSwitch.MeasurementType2UnitMapping:
        return myConceptMeasurementType2UnitMapping;
      case LanguageConceptSwitch.MeasurementUnaryOperator:
        return myConceptMeasurementUnaryOperator;
      case LanguageConceptSwitch.MeasurementUnitConfig:
        return myConceptMeasurementUnitConfig;
      case LanguageConceptSwitch.MoreOrEqualUnaryOperator:
        return myConceptMoreOrEqualUnaryOperator;
      case LanguageConceptSwitch.Operand:
        return myConceptOperand;
      case LanguageConceptSwitch.Operator:
        return myConceptOperator;
      case LanguageConceptSwitch.OutputResult:
        return myConceptOutputResult;
      case LanguageConceptSwitch.Protocol:
        return myConceptProtocol;
      case LanguageConceptSwitch.PulseMeasurement:
        return myConceptPulseMeasurement;
      case LanguageConceptSwitch.SystolicPressureMeasurement:
        return myConceptSystolicPressureMeasurement;
      case LanguageConceptSwitch.TemperatureMeasurement:
        return myConceptTemperatureMeasurement;
      case LanguageConceptSwitch.WeightMeasurement:
        return myConceptWeightMeasurement;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationMeasurementType, myEnumerationMeasurementUnit, myCSDatatypeFPNumber);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBloodPressureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "BloodPressureMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda978dL);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635544461");
    b.version(2);
    b.alias("blood pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDiastolicPressueMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "DiastolicPressueMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9794L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.BloodPressureMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda978dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635544468");
    b.version(2);
    b.alias("diastolic pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEvaluationEntry() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "EvaluationEntry", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc41f17L);
    b.class_(false, false, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4732312587025522455");
    b.version(2);
    b.aggregate("range", 0x2f8212ac0c4edb09L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c4edadcL).optional(false).ordered(true).multiple(true).origin("3423319196905167625").done();
    b.aggregate("output", 0x1f38b4c739accc02L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739accbebL).optional(false).ordered(true).multiple(false).origin("2249746781630680066").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "FloatConstant", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd44f32L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Operand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635132722");
    b.version(2);
    b.property("value", 0x3d41ce506dd44f82L).type(MetaIdFactory.dataTypeId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd45327L)).origin("4414035954635132802").done();
    b.alias("float");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGlucoseMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "GlucoseMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c7398f1c67L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781628734567");
    b.version(2);
    b.alias("glucose");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInputSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "InputSpec", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc220cdL);
    b.class_(false, false, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4732312587025391821");
    b.version(2);
    b.property("timeRange", 0x41ac8d399bc220f3L).type(PrimitiveTypeId.INTEGER).origin("4732312587025391859").done();
    b.property("size", 0x41ac8d399bc220f6L).type(PrimitiveTypeId.INTEGER).origin("4732312587025391862").done();
    b.aggregate("measure", 0x3d41ce506ddc09a2L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L).optional(false).ordered(true).multiple(false).origin("4414035954635639202").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "IntegerConstant", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696cL);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Operand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954634025324");
    b.version(2);
    b.property("value", 0x3d41ce506dc5545cL).type(PrimitiveTypeId.INTEGER).origin("4414035954634151004").done();
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessOrEqualUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "LessOrEqualUnaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b156a7L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.MeasurementUnaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b14c4cL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781630977703");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635544456");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementBinaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementBinaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c586128L);
    b.class_(false, true, false);
    b.super_("healthtech.structure.Operator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b155feL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/3423319196905791784");
    b.version(2);
    b.aggregate("operand", 0x3d41ce506dc36969L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L).optional(false).ordered(true).multiple(false).origin("4414035954634025321").done();
    b.aggregate("secondOperand", 0x1f38b4c7398b1284L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L).optional(false).ordered(true).multiple(false).origin("2249746781628469892").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementOperand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementOperand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L);
    b.class_(false, true, false);
    b.super_("healthtech.structure.Operand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422309725767");
    b.version(2);
    b.property("unit", 0xbb4c090788f648L).type(MetaIdFactory.dataTypeId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddb7bfL)).origin("52719422309725768").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementOperandAdapter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementOperandAdapter", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.MeasurementOperand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422303626052");
    b.version(2);
    b.aggregate("operand", 0xbb4c09072be35bL).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL).optional(false).ordered(true).multiple(false).origin("52719422303626075").done();
    b.alias("unit operaaa");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementRange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementRange", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c4edadcL);
    b.class_(false, false, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/3423319196905167580");
    b.version(2);
    b.aggregate("rangeOperator", 0x3d41ce506dc36964L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b155feL).optional(false).ordered(true).multiple(false).origin("4414035954634025316").done();
    b.aggregate("measurement", 0x1f38b4c739b15613L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L).optional(false).ordered(true).multiple(false).origin("2249746781630977555").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementRangeOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementRangeOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3695fL);
    b.class_(false, false, false);
    b.super_("healthtech.structure.MeasurementBinaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c586128L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954634025311");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementType2UnitMapping() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementType2UnitMapping", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e09264L);
    b.class_(false, false, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422298690148");
    b.version(2);
    b.property("unit", 0xbb4c0906e0926bL).type(MetaIdFactory.dataTypeId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddb7bfL)).origin("52719422298690155").done();
    b.aggregate("type", 0xbb4c0906e09265L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L).optional(false).ordered(true).multiple(false).origin("52719422298690149").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementUnaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b14c4cL);
    b.class_(false, true, false);
    b.super_("healthtech.structure.Operator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b155feL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781630975052");
    b.version(2);
    b.aggregate("operand", 0x1f38b4c739b1561eL).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L).optional(false).ordered(true).multiple(false).origin("2249746781630977566").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementUnitConfig() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MeasurementUnitConfig", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddd1c3L);
    b.class_(false, false, true);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422298509763");
    b.version(2);
    b.aggregate("mappings", 0xbb4c0906e2177bL).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e09264L).optional(false).ordered(true).multiple(true).origin("52719422298789755").done();
    b.alias("Measurement Units");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMoreOrEqualUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "MoreOrEqualUnaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b15693L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.MeasurementUnaryOperator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b14c4cL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781630977683");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "Operand", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL);
    b.class_(false, true, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954634025325");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "Operator", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b155feL);
    b.class_(false, true, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781630977534");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputResult() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "OutputResult", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739accbebL);
    b.class_(false, false, false);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/2249746781630680043");
    b.version(2);
    b.property("result", 0x1f38b4c739accbecL).type(PrimitiveTypeId.STRING).origin("2249746781630680044").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProtocol() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "Protocol", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc1bfe2L);
    b.class_(false, false, true);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4732312587025367010");
    b.version(2);
    b.property("description", 0x41ac8d399bc220c8L).type(PrimitiveTypeId.STRING).origin("4732312587025391816").done();
    b.property("reference", 0x41ac8d399bc220caL).type(PrimitiveTypeId.STRING).origin("4732312587025391818").done();
    b.aggregate("inputSpecs", 0x41ac8d399bc220f1L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc220cdL).optional(false).ordered(true).multiple(true).origin("4732312587025391857").done();
    b.aggregate("eval", 0x41ac8d399bc41f14L).target(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc41f17L).optional(true).ordered(true).multiple(true).origin("4732312587025522452").done();
    b.alias("Clinic Protocol");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPulseMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "PulseMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e476e7L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422298945255");
    b.version(2);
    b.alias("pulse");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSystolicPressureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "SystolicPressureMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9795L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.BloodPressureMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda978dL);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635544469");
    b.version(2);
    b.alias("systolic pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTemperatureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "TemperatureMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e39f51L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/52719422298890065");
    b.version(2);
    b.alias("temp");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWeightMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("healthtech", "WeightMeasurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9789L);
    b.class_(false, false, false);
    b.super_("healthtech.structure.Measurement", 0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L);
    b.origin("r:f9a5d9b0-e4d1-425f-bdda-6234399d7263(healthtech.structure)/4414035954635544457");
    b.version(2);
    b.alias("weight");
    return b.create();
  }
}
