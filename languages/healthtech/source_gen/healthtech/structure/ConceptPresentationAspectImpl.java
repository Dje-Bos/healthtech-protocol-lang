package healthtech.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BloodPressureMeasurement;
  private ConceptPresentation props_DiastolicPressueMeasurement;
  private ConceptPresentation props_EvaluationEntry;
  private ConceptPresentation props_FloatConstant;
  private ConceptPresentation props_GlucoseMeasurement;
  private ConceptPresentation props_InputSpec;
  private ConceptPresentation props_IntegerConstant;
  private ConceptPresentation props_LessOrEqualUnaryOperator;
  private ConceptPresentation props_Measurement;
  private ConceptPresentation props_MeasurementBinaryOperator;
  private ConceptPresentation props_MeasurementOperand;
  private ConceptPresentation props_MeasurementOperandAdapter;
  private ConceptPresentation props_MeasurementRange;
  private ConceptPresentation props_MeasurementRangeOperator;
  private ConceptPresentation props_MeasurementType2UnitMapping;
  private ConceptPresentation props_MeasurementUnaryOperator;
  private ConceptPresentation props_MeasurementUnitConfig;
  private ConceptPresentation props_MoreOrEqualUnaryOperator;
  private ConceptPresentation props_Operand;
  private ConceptPresentation props_Operator;
  private ConceptPresentation props_OutputResult;
  private ConceptPresentation props_Protocol;
  private ConceptPresentation props_PulseMeasurement;
  private ConceptPresentation props_SystolicPressureMeasurement;
  private ConceptPresentation props_TemperatureMeasurement;
  private ConceptPresentation props_WeightMeasurement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BloodPressureMeasurement:
        if (props_BloodPressureMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BloodPressureMeasurement = cpb.create();
        }
        return props_BloodPressureMeasurement;
      case LanguageConceptSwitch.DiastolicPressueMeasurement:
        if (props_DiastolicPressueMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DiastolicPressueMeasurement = cpb.create();
        }
        return props_DiastolicPressueMeasurement;
      case LanguageConceptSwitch.EvaluationEntry:
        if (props_EvaluationEntry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EvaluationEntry");
          props_EvaluationEntry = cpb.create();
        }
        return props_EvaluationEntry;
      case LanguageConceptSwitch.FloatConstant:
        if (props_FloatConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("float");
          props_FloatConstant = cpb.create();
        }
        return props_FloatConstant;
      case LanguageConceptSwitch.GlucoseMeasurement:
        if (props_GlucoseMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GlucoseMeasurement = cpb.create();
        }
        return props_GlucoseMeasurement;
      case LanguageConceptSwitch.InputSpec:
        if (props_InputSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InputSpec");
          props_InputSpec = cpb.create();
        }
        return props_InputSpec;
      case LanguageConceptSwitch.IntegerConstant:
        if (props_IntegerConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_IntegerConstant = cpb.create();
        }
        return props_IntegerConstant;
      case LanguageConceptSwitch.LessOrEqualUnaryOperator:
        if (props_LessOrEqualUnaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">=");
          props_LessOrEqualUnaryOperator = cpb.create();
        }
        return props_LessOrEqualUnaryOperator;
      case LanguageConceptSwitch.Measurement:
        if (props_Measurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Measurement = cpb.create();
        }
        return props_Measurement;
      case LanguageConceptSwitch.MeasurementBinaryOperator:
        if (props_MeasurementBinaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MeasurementBinaryOperator = cpb.create();
        }
        return props_MeasurementBinaryOperator;
      case LanguageConceptSwitch.MeasurementOperand:
        if (props_MeasurementOperand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MeasurementOperand = cpb.create();
        }
        return props_MeasurementOperand;
      case LanguageConceptSwitch.MeasurementOperandAdapter:
        if (props_MeasurementOperandAdapter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("unit operaaa");
          props_MeasurementOperandAdapter = cpb.create();
        }
        return props_MeasurementOperandAdapter;
      case LanguageConceptSwitch.MeasurementRange:
        if (props_MeasurementRange == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MeasurementRange");
          props_MeasurementRange = cpb.create();
        }
        return props_MeasurementRange;
      case LanguageConceptSwitch.MeasurementRangeOperator:
        if (props_MeasurementRangeOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-");
          props_MeasurementRangeOperator = cpb.create();
        }
        return props_MeasurementRangeOperator;
      case LanguageConceptSwitch.MeasurementType2UnitMapping:
        if (props_MeasurementType2UnitMapping == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MeasurementType2UnitMapping");
          props_MeasurementType2UnitMapping = cpb.create();
        }
        return props_MeasurementType2UnitMapping;
      case LanguageConceptSwitch.MeasurementUnaryOperator:
        if (props_MeasurementUnaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MeasurementUnaryOperator = cpb.create();
        }
        return props_MeasurementUnaryOperator;
      case LanguageConceptSwitch.MeasurementUnitConfig:
        if (props_MeasurementUnitConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MeasurementUnitConfig = cpb.create();
        }
        return props_MeasurementUnitConfig;
      case LanguageConceptSwitch.MoreOrEqualUnaryOperator:
        if (props_MoreOrEqualUnaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<=");
          props_MoreOrEqualUnaryOperator = cpb.create();
        }
        return props_MoreOrEqualUnaryOperator;
      case LanguageConceptSwitch.Operand:
        if (props_Operand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Operand = cpb.create();
        }
        return props_Operand;
      case LanguageConceptSwitch.Operator:
        if (props_Operator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Operator = cpb.create();
        }
        return props_Operator;
      case LanguageConceptSwitch.OutputResult:
        if (props_OutputResult == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputResult");
          props_OutputResult = cpb.create();
        }
        return props_OutputResult;
      case LanguageConceptSwitch.Protocol:
        if (props_Protocol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This is clinic protocol concept");
          cpb.presentationByName();
          props_Protocol = cpb.create();
        }
        return props_Protocol;
      case LanguageConceptSwitch.PulseMeasurement:
        if (props_PulseMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PulseMeasurement = cpb.create();
        }
        return props_PulseMeasurement;
      case LanguageConceptSwitch.SystolicPressureMeasurement:
        if (props_SystolicPressureMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SystolicPressureMeasurement = cpb.create();
        }
        return props_SystolicPressureMeasurement;
      case LanguageConceptSwitch.TemperatureMeasurement:
        if (props_TemperatureMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TemperatureMeasurement = cpb.create();
        }
        return props_TemperatureMeasurement;
      case LanguageConceptSwitch.WeightMeasurement:
        if (props_WeightMeasurement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WeightMeasurement = cpb.create();
        }
        return props_WeightMeasurement;
    }
    return null;
  }
}
