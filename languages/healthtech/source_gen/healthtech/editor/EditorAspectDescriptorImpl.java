package healthtech.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new EvaluationEntry_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new FloatConstant_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new InputSpec_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new LessOrEqualUnaryOperator_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Measurement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new MeasurementOperandAdapter_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new MeasurementRange_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MeasurementRangeOperator_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new MeasurementType2UnitMapping_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new MeasurementUnitConfig_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MoreOrEqualUnaryOperator_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new OutputResult_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Protocol_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new Measurement_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new MeasurementOperandAdapter_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new evalMeasuremntMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Measurement_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new MeasurementOperandAdapter_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new Operand_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex4.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a6, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new evalMeasurementMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc41f17L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd44f32L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc220cdL), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696cL), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b156a7L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c4edadcL), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3695fL), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e09264L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddd1c3L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739b15693L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x1f38b4c739accbebL), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc1bfe2L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L), MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696dL)).seal();
  private static final ConceptSwitchIndex conceptIndex4 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L)).seal();
  private static final String[] stringSwitchCases_xbvbvu_a0a0a0a1a4 = new String[]{"healthtech.editor.evalMeasuremntMenu"};
  private static final String[] stringSwitchCases_xbvbvu_a0a0a0a1a6 = new String[]{"healthtech.editor.evalMeasurementMenu"};
}
