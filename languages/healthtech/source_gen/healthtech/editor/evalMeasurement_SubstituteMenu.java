package healthtech.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.ConceptMenusPart;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.menus.substitute.SimpleConceptSubstituteMenuPart;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class evalMeasurement_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Concepts_oklo18_a(), CONCEPTS.Measurement$Hi));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("named substitute menu " + "evalMeasurement_SubstituteMenu", new SNodePointer("r:921d0538-35a9-424b-be47-a0aa36cee6a0(healthtech.editor)", "4414035954638367746")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  public class SMP_Concepts_oklo18_a extends ConceptMenusPart<SubstituteMenuItem, SubstituteMenuContext> {
    protected Collection getConcepts(SubstituteMenuContext _context) {

      Iterable<SNode> inputMeasurements = SLinkOperations.collect(SLinkOperations.collectMany(SNodeOperations.getNodeAncestors(_context.getParentNode(), CONCEPTS.Protocol$AP, false), LINKS.inputSpecs$6ijH), LINKS.measure$duPR);
      List<SNode> inputMeasurementsArr = Sequence.fromIterable(inputMeasurements).toListSequence();
      if (Sequence.fromIterable(inputMeasurements).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.BloodPressureMeasurement$TS);
        }
      })) {
        inputMeasurementsArr.add(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9794L, "healthtech.structure.DiastolicPressueMeasurement")));
        inputMeasurementsArr.add(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9795L, "healthtech.structure.SystolicPressureMeasurement")));
      }
      return ListSequence.fromList(inputMeasurementsArr).select(new ISelector<SNode, SConcept>() {
        public SConcept select(SNode it) {
          return SNodeOperations.getConcept(it);
        }
      }).where(new IWhereFilter<SConcept>() {
        public boolean accept(SConcept it) {
          return !(SConceptOperations.isExactly(SNodeOperations.asSConcept(it), CONCEPTS.BloodPressureMeasurement$TS));
        }
      }).toListSequence();
    }

    @NotNull
    @Override
    public List<SubstituteMenuItem> createItems(SubstituteMenuContext _context) {
      _context.getEditorMenuTrace().pushTraceInfo();
      _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("simple actions for the list of concepts", new SNodePointer("r:921d0538-35a9-424b-be47-a0aa36cee6a0(healthtech.editor)", "4414035954638367749")));
      try {
        return super.createItems(_context);
      } finally {
        _context.getEditorMenuTrace().popTraceInfo();
      }
    }
    @Override
    protected Collection<SubstituteMenuItem> createItemsForConcept(final SubstituteMenuContext _context, final SAbstractConcept concept) {
      return new SimpleConceptSubstituteMenuPart(concept) {
        @NotNull
        @Override
        public List<SubstituteMenuItem> createItems(SubstituteMenuContext context) {
          context.getEditorMenuTrace().pushTraceInfo();
          context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("simple action for concept: " + concept.getName(), null));
          try {
            return super.createItems(context);
          } finally {
            context.getEditorMenuTrace().popTraceInfo();
          }
        }
      }.createItems(_context);
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Measurement$Hi = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda9788L, "healthtech.structure.Measurement");
    /*package*/ static final SConcept Protocol$AP = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc1bfe2L, "healthtech.structure.Protocol");
    /*package*/ static final SConcept BloodPressureMeasurement$TS = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dda978dL, "healthtech.structure.BloodPressureMeasurement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink inputSpecs$6ijH = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc1bfe2L, 0x41ac8d399bc220f1L, "inputSpecs");
    /*package*/ static final SContainmentLink measure$duPR = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x41ac8d399bc220cdL, 0x3d41ce506ddc09a2L, "measure");
  }
}
