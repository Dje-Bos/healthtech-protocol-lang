package healthtech.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_MeasurementOperandAdapter_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_MeasurementOperandAdapter_NonTypesystemRule() {
  }
  public void applyRule(final SNode measurementOperandAdapter, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> unitConfigs = SModelOperations.roots(SNodeOperations.getModel(measurementOperandAdapter), CONCEPTS.MeasurementUnitConfig$RG);
    SEnumerationLiteral unit = SPropertyOperations.getEnum(Sequence.fromIterable(SLinkOperations.collectMany(unitConfigs, LINKS.mappings$JWDo)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getConcept(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(measurementOperandAdapter, CONCEPTS.MeasurementRange$It, false, false), LINKS.measurement$LLkM)).isSubConceptOf(SNodeOperations.getConcept(SLinkOperations.getTarget(it, LINKS.type$f5j0)));
      }
    }), PROPS.unit$f5w5);
    if (!(unit.equals(SPropertyOperations.getEnum(measurementOperandAdapter, PROPS.unit$Ojzw)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(measurementOperandAdapter, String.format("unit '%s' for type '%s' not allowed", SPropertyOperations.getEnum(measurementOperandAdapter, PROPS.unit$Ojzw), SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(measurementOperandAdapter, CONCEPTS.MeasurementRange$It, false, false), LINKS.measurement$LLkM), PROPS.name$tAp1)), "r:5213bd4f-a990-46c9-8602-95b15eab02a1(healthtech.typesystem)", "7786684554255278451", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.MeasurementOperandAdapter$GE;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept MeasurementUnitConfig$RG = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddd1c3L, "healthtech.structure.MeasurementUnitConfig");
    /*package*/ static final SConcept MeasurementRange$It = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c4edadcL, "healthtech.structure.MeasurementRange");
    /*package*/ static final SConcept MeasurementOperandAdapter$GE = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L, "healthtech.structure.MeasurementOperandAdapter");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink mappings$JWDo = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906ddd1c3L, 0xbb4c0906e2177bL, "mappings");
    /*package*/ static final SContainmentLink measurement$LLkM = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c4edadcL, 0x1f38b4c739b15613L, "measurement");
    /*package*/ static final SContainmentLink type$f5j0 = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e09264L, 0xbb4c0906e09265L, "type");
  }

  private static final class PROPS {
    /*package*/ static final SProperty unit$f5w5 = MetaAdapterFactory.getProperty(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c0906e09264L, 0xbb4c0906e0926bL, "unit");
    /*package*/ static final SProperty unit$Ojzw = MetaAdapterFactory.getProperty(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c090788f647L, 0xbb4c090788f648L, "unit");
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
