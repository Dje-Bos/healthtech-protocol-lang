package healthtech.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_MeasurementBinaryOperator_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_MeasurementBinaryOperator_NonTypesystemRule() {
  }
  public void applyRule(final SNode measurementBinaryOperator, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.operand$rm1x), CONCEPTS.MeasurementOperandAdapter$GE) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.secondOperand$Q$Uk), CONCEPTS.MeasurementOperandAdapter$GE)) {
      float fl = (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.operand$rm1x), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.IntegerConstant$Mh) ? SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.operand$rm1x), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.IntegerConstant$Mh), PROPS.value$VaKW) : Float.parseFloat(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.operand$rm1x), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.FloatConstant$wb), PROPS.value$7rXu)));
      float fl2 = (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.secondOperand$Q$Uk), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.IntegerConstant$Mh) ? SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.secondOperand$Q$Uk), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.IntegerConstant$Mh), PROPS.value$VaKW) : Float.parseFloat(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.secondOperand$Q$Uk), CONCEPTS.MeasurementOperandAdapter$GE), LINKS.operand$_fE0), CONCEPTS.FloatConstant$wb), PROPS.value$7rXu)));

      if (fl > fl2) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(measurementBinaryOperator, LINKS.operand$rm1x), "min should be less than max", "r:5213bd4f-a990-46c9-8602-95b15eab02a1(healthtech.typesystem)", "2249746781629803491", null, errorTarget);
        }
      }

    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.MeasurementBinaryOperator$kO;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink operand$rm1x = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c586128L, 0x3d41ce506dc36969L, "operand");
    /*package*/ static final SContainmentLink operand$_fE0 = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L, 0xbb4c09072be35bL, "operand");
    /*package*/ static final SContainmentLink secondOperand$Q$Uk = MetaAdapterFactory.getContainmentLink(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c586128L, 0x1f38b4c7398b1284L, "secondOperand");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept MeasurementOperandAdapter$GE = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0xbb4c09072be344L, "healthtech.structure.MeasurementOperandAdapter");
    /*package*/ static final SConcept IntegerConstant$Mh = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696cL, "healthtech.structure.IntegerConstant");
    /*package*/ static final SConcept FloatConstant$wb = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd44f32L, "healthtech.structure.FloatConstant");
    /*package*/ static final SConcept MeasurementBinaryOperator$kO = MetaAdapterFactory.getConcept(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x2f8212ac0c586128L, "healthtech.structure.MeasurementBinaryOperator");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$VaKW = MetaAdapterFactory.getProperty(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dc3696cL, 0x3d41ce506dc5545cL, "value");
    /*package*/ static final SProperty value$7rXu = MetaAdapterFactory.getProperty(0x302f6a2f71494d75L, 0x8daf01fecbeaf5d3L, 0x3d41ce506dd44f32L, 0x3d41ce506dd44f82L, "value");
  }
}
